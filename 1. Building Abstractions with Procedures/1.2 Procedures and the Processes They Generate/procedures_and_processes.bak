#lang racket

;-----------------------------------------------------------------------------------------------------
; Exercise 1.9

(define (inc a)
    (+ a 1))

(define (dec a)
    (- a 1))

(define (add1 a b)
    (if (= a 0)
        b
        (inc (add1 (dec a) b)))
)

(define (add2 a b)
    (if (= a 0)
        b
        (add2 (dec a) (inc b)))
)

#|
    (add1 4 5) --> ignoring the if statement as it's mainly noise in this context
    ((add1 (3) 5) + 1)
    ((add1 (2) 5) + 1 + 1)
    ((add1 (1) 5) + 1 + 1 + 1)
    ((add1 (0) 5) + 1 + 1 + 1 + 1)
    (5 + 1 + 1 + 1 + 1)
    9


    (add2 4 5)
    (add2 (3) (6))
    (add2 (2) (7))
    (add2 (1) (8))
    (add2 (0) (9))
    9

    First one is linearly recursive and the second one is linearly iterative
|# 


;-----------------------------------------------------------------------------------------------------
; Exercise 1.10

(define (A x y)
    (cond ((= y 0) 0)
          ((= x 0) (* 2 y))
          ((= y 1) 2)
          (else (A (- x 1) (A x (- y 1))))
    )
)

#|
    (A 1 10)
    (A 0 (A 1 9))
    (A 0 (A 0 (A 1 8)))
    ...
    (A 0 (A 0 (... A 0 2)))
    expands to 2^10 = 1024


    (A 2 4)
    (A 1 (A 2 3))
    (A 1 (A 1 (A 2 2)))
    (A 1 (A 1 (A 1 (A 2 1))))
    (A 1 (A 1 (A 1 2)))
    (A 1 (A 1 (A 0 (A 1 1))))
    (A 1 (A 1 (A 0 2)))
    (A 1 (A 1 4)) -> from above we know that A 1 x -> 2^x
    (A 1 16)
    2^16 -> 65536


    (A 3 3)
    (A 2 (A 3 2))
    (A 2 (A 2 (A 3 1)))
    (A 2 (A 2 2))
    (A 2 (A 1 (A 2 1)))
    (A 2 (A 1 2))
    (A 2 4) -> from above we already have the answer to this
    2^16 = 655536
|#


(A 1 10)
(A 2 4)
(A 3 3)


(define (f n) (A 0 n))
(define (g n) (A 1 n))
(define (h n) (A 2 n))


#|
    Give precise mathematical definitions of the above.

    f(n) = 2n
    g(n) = 2^n
    h(n) = 2 ^ (2 ^ ... n - 1 times)
|#

(h 3)
(h 4)

;-----------------------------------------------------------------------------------------------------
; Coin Change (this is a project euler problem I need to finish anyways :P)
; Still have a very hard time seeing how to come up with a solution like this! It's quite a challenge
(define (count-change amount)
    (cc amount 8))

(define (cc amount kinds-of-coins)
    (cond ((= amount 0) 1)
          ((< amount 0) 0)
          ((= kinds-of-coins 0) 0)
          (else (+ (cc amount 
                        (- kinds-of-coins 1))
                   (cc (- amount (first-denomination kinds-of-coins))
                       kinds-of-coins)
          ))
    )
)

(define (first-denomination kinds-of-coins)
    (cond ((= kinds-of-coins 1) 1)
          ((= kinds-of-coins 2) 2)
          ((= kinds-of-coins 3) 5)
          ((= kinds-of-coins 4) 10)
          ((= kinds-of-coins 5) 20)
          ((= kinds-of-coins 6) 50)
          ((= kinds-of-coins 7) 100)
          ((= kinds-of-coins 8) 200)
    )
)

;-----------------------------------------------------------------------------------------------------
; Exercise 1.11

(define (f_recursive n)
    (cond ((< n 3) n)
          (else (+ 
                    (f_recursive (- n 1)) 
                    (* 2 (f_recursive (- n 2))) 
                    (* 3 (f_recursive (- n 3)))
                ))
    )
)

(define (f_iter n)
    (define (f a b c count)
        (cond ((< n 3) n)
              ((<= count 0) a)
              (else (f (+ a (* 2 b) (* 3 c)) a b (- count 1)))))
    (f 2 1 0 (- n 2)))

#|
    (f_iter 3)
    (f 2 1 0 1)
    (f 4 2 1 0)
    4

    (f_iter 5)
    (f 2 1 0 3)
    (f 4 2 1 2)
    (f 11 4 2 1)
    (f 25 11 4 0)
    25
|#

;-----------------------------------------------------------------------------------------------------
; Exercise 1.12

#|
    1
   1 1
  1 2 1
 1 3 3 1 
1 4 6 4 1
|#


(define (pascals row column)
    (cond ((= 0 row) 0)
          ((< column 0) 0)
          ((> column row) 0)  
          ((= row column) 1)
          ((= column 1) 1)
          (else (+ (pascals (- row 1)(- column 1))
                   (pascals (- row 1) column)))
    )
)

;-----------------------------------------------------------------------------------------------------
; Exercise 1.13

#|
    completed by hand in notebook. Hint: use the definition Fib(n) = Fib(n-1) + Fib(n - 2)
    then do some substitutions to get a form where you can swap in the provided definitions for phi.
|#

;-----------------------------------------------------------------------------------------------------
; Exercise 1.14 - tree for count change problem. NOTE: solution above uses extra coins than the book
;                 NOTE: it is also beneficial to switch the order of the coins around in the denom.

#|
    ended up doing this in a notebook

    Spacial Complexity - same as maximum depth of the tree which occurs when changing the amount
                         using only pennies -> O(n)

    Time Complexity - O(n^T) where T is the number of types of coins. This makes sense because each
                      coin type always ends up with a subtree with the penny change tree in the end
                      which means it has to be O(n^T)
|#

;-----------------------------------------------------------------------------------------------------
; Exercise 1.15 - sin approximation

#|
    (sine 12.15)
    (p (sine 4.05))
    (p (p (sine 1.35)))
    (p (p (p (sine 0.45))))
    (p (p (p (p (sine 0.15)))))
    (p (p (p (p (p (sine 0.05))))))

    a) procedure p is applied 5 times

    b) 
        a/(3^n) < 0.1
        a / 0.1 < 3^n
        10a < 3^n
        log(a) + log(10) < n log(3)
        log(a) + 1 < n log(3)
        (log(a) + 1)/log(3) < n
        
        -> log(a) order is logarithmic
|#

;-----------------------------------------------------------------------------------------------------
; Exercise 1.16 -> iterative successive squaring

#|
    invariant a goes:
    a -> b^2 -> b^(2*...n)
|#

(define (even? a)
    (= (remainder a 2) 0))

(define (square a)
    (* a a))

(define (pow base power)
    (define (pow-iter n b a)
        (cond ((= n 0) a)
              ((even? n) (pow-iter (/ n 2) (square b) a))
              (else (pow-iter (- n 1) b (* b a)))))
    (pow-iter power base 1)
)


;-----------------------------------------------------------------------------------------------------
; Exercise 1.17 -> logarithmic multiplication from addition
(define (double n)
    (* n 2))

; Note: this assumes n is even ***
(define (halve n)
    (/ n 2))

(define (multiply a b)
    (cond ((= b 1) a)
          ((even? b) (multiply (double a) (halve b)))
          (else (+ a (multiply a (- b 1))))))

;-----------------------------------------------------------------------------------------------------
; Exercise 1.18 -> logarithmic multiplication from addition in an iterative approach

(define (iter_multiply a b)
    (define (iter a b acc)
        (cond ((= b 0) acc)
              ((even? b) (iter (double a) (halve b) acc))
              (else (iter a (- b 1) (+ acc a)))        
        )
    )
    (iter a b 0)
)

;-----------------------------------------------------------------------------------------------------
; Exercise 1.19 -> logarithmic fibonacci

(define (fib n)
    (define (fib-iter a b p q count)
        (cond ((= count 0) b)
              ((even? count)
                (fib-iter
                    a
                    b
                    (+ (* p p) (* q q))
                    (+ (* q q) (* 2 p q))
                    (/ count 2)))
              (else (fib-iter (+ (* b q) (* a q) (* a p))
                              (+ (* b p) (* a q))
                              p
                              q
                              (- count 1)))))
    (fib-iter 1 0 0 1 n))

;-----------------------------------------------------------------------------------------------------
; Exercise 1.20 -> greatest common divisors

(define (gcd a b)
    (if (= b 0)
        a
        (gcd b (remainder a b))))


#|
    Normal Order - Fully Expand and Reduce
    (gcd 206 40)
    (if (= 40 0))
    (gcd 40 (remainder 206 40))
    (if (= 6 0))
    (gcd (remainder 206 40) (remainder 40 (remainder 206 40)))
    (if (= (remainder 40 (remainder 206 40)) 0))
    (if (= 4 0))
    ... --> this continues and totally blows up
    From online: 18 remainder invokations

    Applicative Order - Reduce First
    (gcd 206 40)    
    (gcd 40 (remainder 206 40))
    (gcd 40 6)
    (gcd 6 (remainder 40 6))
    (gcd 6 4)
    (gcd 4 (remainder 6 4))
    (gcd 4 2)
    (gcd 2 (remainder 4 2))

    only performs 4 invokations of remainder
|#


;-----------------------------------------------------------------------------------------------------
; Exercise 1.21-> smallest divisors

(define (smallest_divisor n)
    (find_divisor n 2))

(define (find_divisor n test_divisor)
    (cond ((> (square test_divisor) n) n)
          ((divides? test_divisor n) test_divisor)
          (else (find_divisor n (+ test_divisor 1)))))

(define (divides? a b)
    (= (remainder b a) 0))

(smallest_divisor 199)
(smallest_divisor 1999)
(smallest_divisor 19999)

#|
    a -> 199
    b -> 1999
    c -> 7
|#

;-----------------------------------------------------------------------------------------------------
; Exercise 1.22 -> timed prime factors

(define (timed_prime_test n)
    (newline)
    (display n)
    (start_prime_test n (current-inexact-milliseconds)))

(define (start_prime_test n start_time)
    (if (prime? n)
        (report_prime (- (current-inexact-milliseconds) start_time))
        (display "")))

(define (report_prime elapsed_time)
    (display " *** ")
    (display elapsed_time))

#|
(define (prime? n)
    (= n (smallest_divisor n)))
|#

(define (search-for-primes start end count)
    (define (prime-search number found start-time)
        (cond ((= found count) (display (- (current-inexact-milliseconds) start-time)))
              ((= number end) (display "range exceeded"))
              (else (if (fast-prime? number 15) 
                        (begin 
                            (display "Prime Found: ")
                            (display number)
                            (display "\n")
                            (prime-search (+ number 1) (+ found 1) start-time))
                        (prime-search (+ number 1) found start-time)
              ))
        )
    
    
    )
    (prime-search start 0 (current-inexact-milliseconds))
)

#|
    Results:

    a) first three primes larger than 1000 -> 1009, 1013, 1019
                                      time_ms: ~8
    
    b) first three primes larger than 10000 -> 10007, 10009, 10037
                                           time_ms ~8.4
   
    c) first three primes larger than 100000 -> 100003, 100019, 100043
                                      time_ms: ~8

    d) first three primes larger than 1000000 -> 1000003, 1000033, 1000037
                                      time_ms: ~10.5 ms

    Pretty sure the computer at this point in time is just way to fast for testing primes at this
    order of magnitude. Especially with the inexact nature of the timing functions. Probably need to 
    increase the order of magnitude substantially to see a difference :)
|#

;-----------------------------------------------------------------------------------------------------
; Exercise 1.23 -> timed prime factors with improved factoring

(define (next-factor n)
  (cond ((< n 3) (+ n 1))
        (else (+ n 2))))

(define (find-divisor-mod n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor-mod n (next-factor test-divisor)))))

(define (smallest-divisor-mod n)
    (find-divisor-mod n 2))

(define (prime? n)
    (= n (smallest-divisor-mod n)))

#|
    NOTE: uncomment the prime definitions from above to change the speed of the algorithm. The above version here is MUCH faster due to the halving
          of the number of checks required. Secondary note, the speed is not quite twice as fast due to the conditional branching in next-factor.
|#


;-----------------------------------------------------------------------------------------------------
; Exercise 1.24 ->

(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp) (remainder (square (expmod base (/ exp 2) m)) m))
        (else (remainder (* base (expmod base (- exp 1) m)) m))))

(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)))

#|
    For Log(n) growth, we would expect the time taken to test for primes at 1000000 to only be double what it takes to test at 1000.

|#
;-----------------------------------------------------------------------------------------------------
; Exercise 1.25 -> Alyssa thinks expmod could be better

#|
    Mathematically she's correct. However, she does not take into account that the numbers in this case will be much larger (hence slower)
    than the original expmod, which always will modulus the operands and thus keep the size of the numbers down!
|#
(define (fast-exp b n)
  (cond ((= n 0) 1)
        ((even? n) (square (fast-exp b (/ n 2))))
        (else (* b (fast-exp b (- n 1))))
  ))

(define (expmod-fast base exp m)
  (remainder (fast-exp base exp) m))


;-----------------------------------------------------------------------------------------------------
; Exercise 1.26 -> Louis' code runs really slow
#|
   The reason for this is that square takes the result of expmod and squares it, whereas Louis is calculating the entire expmod twice in order to do the square.
   This essentially makes the process go from linear to a tree recursion at (exponential)

|#